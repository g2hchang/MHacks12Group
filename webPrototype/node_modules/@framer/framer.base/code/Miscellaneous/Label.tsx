import * as React from "react"
import { Label as BaseLabel, LabelProps, themes } from "../../../base"
import { useContext } from "react"
import { ThemeContext } from "styled-components"
import { ControlType, addPropertyControls } from "framer"
import {
    intentControls,
    decoratorControls,
    resizeControls,
    patternControls,
    themeControls,
} from "../propertyControls"
import { centerLayout, resizeLayout, OmitTheme } from "../utils"

type Props = OmitTheme<LabelProps> &
    Partial<{
        theme: string
        text: string | any
        resize: string
        withStartDecorator: boolean
        withEndDecorator: boolean
        iconStartDecorator: string
        iconEndDecorator: string
    }>

const defaults: Props = {
    width: 120,
    height: 30,
    theme: "light",
    text: "Hello world",
    intent: "primary",
    pattern: "primary",
    resize: "none",
}

export function Label(props: Props = defaults) {
    const themeContext = useContext(ThemeContext)
    const {
        width,
        height,
        resize,
        text,
        withStartDecorator,
        iconStartDecorator,
        withEndDecorator,
        iconEndDecorator,
        theme,
        ...rest
    } = props
    const resizeDimensions = resizeLayout(resize, width, height)

    return centerLayout(
        props,
        <BaseLabel
            endDecorator={withEndDecorator && iconEndDecorator}
            startDecorator={withStartDecorator && iconStartDecorator}
            {...rest}
            theme={themeContext || themes[theme]}
            {...resizeDimensions}
        >
            {text}
        </BaseLabel>
    )
}

Label.defaultProps = {
    ...defaults,
}

addPropertyControls(Label, {
    ...themeControls(defaults.theme),
    ...intentControls(defaults.intent),
    ...patternControls(defaults.pattern),
    ...resizeControls(defaults.resize),
    ...decoratorControls("Globe"),
    text: {
        type: ControlType.String,
        title: "Text",
        defaultValue: defaults.text,
    },
})
