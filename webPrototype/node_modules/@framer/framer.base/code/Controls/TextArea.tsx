import * as React from "react"
import { TextArea as BaseTextArea, TextAreaProps, themes } from "../../../base"
import { useContext } from "react"
import { ThemeContext } from "styled-components"
import { ControlType, addPropertyControls } from "framer"
import {
    intentControls,
    themeControls,
    resizeControls,
    patternControls,
} from "../propertyControls"
import { centerLayout, resizeLayout, OmitTheme } from "../utils"

type Props = OmitTheme<TextAreaProps> &
    Partial<{
        theme: string
        resize: string
        resizable: string
    }>

const defaults: Props = {
    width: 240,
    height: 100,
    theme: "light",
    intent: "primary",
    pattern: "primary",
    value: "",
    placeholder: "Hello world",
    resize: "none",
    disabled: false,
    resizable: "none",
}

export function TextArea(props: Props = defaults) {
    const themeContext = useContext(ThemeContext)
    const { theme, resize, width, height, ...rest } = props
    const resizeDimensions = resizeLayout(resize, width, height)

    return centerLayout(
        props,
        <BaseTextArea
            {...rest}
            theme={themeContext || themes[theme]}
            {...resizeDimensions}
        />
    )
}

TextArea.defaultProps = {
    ...defaults,
}

addPropertyControls(TextArea, {
    ...themeControls(defaults.theme),
    ...intentControls(defaults.intent),
    ...patternControls(defaults.pattern),
    ...resizeControls(defaults.resize),
    disabled: {
        type: ControlType.Boolean,
        title: "Disabled",
        defaultValue: defaults.disabled,
    },
    resizable: {
        type: ControlType.Enum,
        title: "Resizable",
        defaultValue: defaults.resizable,
        options: ["none", "vertical", "horizontal", "both"],
        optionTitles: ["None", "Vertical", "Horizontal", "Both"],
    },
    value: {
        type: ControlType.String,
        title: "Value",
        defaultValue: defaults.value,
    },
    placeholder: {
        type: ControlType.String,
        title: "Placeholder",
        defaultValue: defaults.placeholder,
    },
})
