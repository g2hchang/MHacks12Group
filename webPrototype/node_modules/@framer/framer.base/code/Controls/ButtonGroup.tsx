import * as React from "react"
import { useContext, Children, cloneElement, isValidElement } from "react"
import { ThemeContext } from "styled-components"
import {
    ButtonGroup as BaseButtonGroup,
    ButtonGroupProps,
    themes,
} from "../../../base"
import { ControlType, addPropertyControls } from "framer"
import {
    resizeControls,
    patternControls,
    themeControls,
} from "../propertyControls"
import { centerLayout, resizeLayout, OmitTheme } from "../utils"

type Props = OmitTheme<ButtonGroupProps> &
    Partial<{
        theme: string
        resize: string
    }>

const defaults: Props = {
    width: 520,
    height: 50,
    theme: "light",
    pattern: "primary",
    segmented: false,
    resize: "none",
}

export function ButtonGroup(props: Props = defaults) {
    const themeContext = useContext(ThemeContext)
    const { children, width, height, resize, theme, ...rest } = props
    const resizeDimensions = resizeLayout(resize, width, height)

    return centerLayout(
        props,
        <BaseButtonGroup
            {...rest}
            theme={themeContext || themes[theme]}
            {...resizeDimensions}
        >
            {Children.map(children, child => {
                const [button] = child.props.children

                if (button.type.name === "Button" && isValidElement(button)) {
                    return cloneElement(button, {
                        center: false,
                        style: { flex: 1 },
                    })
                } else {
                    return
                }
            })}
        </BaseButtonGroup>
    )
}

ButtonGroup.defaultProps = {
    ...defaults,
}

addPropertyControls(ButtonGroup, {
    ...themeControls(defaults.theme),
    ...patternControls(defaults.pattern),
    ...resizeControls(defaults.resize),
    segmented: {
        type: ControlType.Boolean,
        title: "Segmented",
        defaultValue: defaults.segmented,
    },
    children: {
        type: ControlType.Array,
        title: "Buttons",
        propertyControl: {
            type: ControlType.ComponentInstance,
        },
    },
})
