import * as React from "react"
import {
    Select as BaseSelect,
    SelectProps,
    themes,
    mapKeys,
} from "../../../base"
import { useContext } from "react"
import { ThemeContext } from "styled-components"
import { ControlType, addPropertyControls } from "framer"
import {
    intentControls,
    patternControls,
    themeControls,
    resizeControls,
} from "../propertyControls"
import { centerLayout, resizeLayout, OmitTheme } from "../utils"

type Props = OmitTheme<SelectProps> &
    Partial<{
        options: string[]
        theme: string
        resize: string
    }>

const defaults: Props = {
    width: 240,
    height: 50,
    theme: "light",
    intent: "primary",
    pattern: "primary",
    disabled: false,
    resize: "none",
    value: "Option B",
    options: ["Option A", "Option B", "Option C"],
}

export function Select(props: Props = defaults) {
    const themeContext = useContext(ThemeContext)
    const { theme, options, resize, width, height, ...rest } = props
    const childrenlessRest = mapKeys(rest, key => key !== "children")
    const resizeDimensions = resizeLayout(resize, width, height)

    return centerLayout(
        props,
        <BaseSelect
            {...childrenlessRest}
            theme={themeContext || themes[theme]}
            {...resizeDimensions}
        >
            {options.map(option => (
                <option key={option} value={option}>
                    {option}
                </option>
            ))}
        </BaseSelect>
    )
}

Select.defaultProps = {
    ...defaults,
}

addPropertyControls(Select, {
    ...themeControls(defaults.theme),
    ...intentControls(defaults.intent),
    ...patternControls(defaults.pattern),
    disabled: {
        type: ControlType.Boolean,
        title: "Disabled",
        defaultValue: defaults.disabled,
    },
    ...resizeControls(defaults.resize),
    value: {
        type: ControlType.String,
        title: "Value",
        defaultValue: defaults.value,
    },
    options: {
        type: ControlType.Array,
        title: "Options",
        defaultValue: defaults.options,
        propertyControl: {
            type: ControlType.String,
            placeholder: "Optionâ€¦",
        },
    },
})
