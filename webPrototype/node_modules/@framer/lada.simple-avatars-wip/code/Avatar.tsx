import * as React from "react";
import * as tinycolor from "tinycolor2";
import * as diff from 'color-diff';
import * as colorHash from 'color-hash';
import { PropertyControls, ControlType } from "framer";

interface Props {
    firstName: string;
    lastName: string;
    size: number;
    width?: number;
    gender?: string;
    showPhoto?: boolean;
    borderRadius?: number;
}

interface LetterProps extends Props {
    color: object;
}

const maleFirstName = new Array(
"Allen","Bob","Carlton",
"David","Ernie","Foster",
"George","Howard","Ian",
"Jeffery","Kenneth","Lawrence",
"Michael","Nathen","Orson",
"Peter","Quinten","Reginald",
"Stephen","Thomas","Morris",
"Victor","Walter","Xavier",
"Charles","Anthony","Gordon",
"Percy","Conrad","Quincey",
"Armand","Jamal","Andrew",
"Matthew","Mark","Gerald"
)

const femaleFirstName = new Array(
"Alice","Bonnie","Cassie",
"Donna","Ethel","Grace",
"Heather","Jan","Katherine",
"Julie","Marcia","Patricia",
"Mabel","Jennifer","Dorthey",
"Mary Ellen","Jacki","Jean",
"Betty","Diane","Annette",
"Dawn","Jody","Karen",
"Mary Jane","Shannon","Stephanie",
"Kathleen","Emily","Tiffany",
"Angela","Christine","Debbie",
"Karla","Sandy","Marilyn",
"Brenda","Hayley","Linda"
)

var lastName = new Array(
"Adams","Bowden","Conway",
"Darden","Edwards","Flynn",
"Gilliam","Holiday","Ingram",
"Johnson","Kraemer","Hunter",
"McDonald","Nichols","Pierce",
"Sawyer","Saunders","Schmidt",
"Schroeder","Smith","Douglas",
"Ward","Watson","Williams",
"Winters","Yeager","Ford",
"Forman","Dixon","Clark",
"Churchill","Brown","Blum",
"Anderson","Black","Cavenaugh",
"Hampton","Jenkins","Prichard"
)

const palette = [ 
    {R: 241, G: 153, B: 74 },
    {R: 235, G: 87, B: 87 },
    {R: 242, G: 201, B: 76},
    {R: 111, G: 207, B: 100},
    {R: 39, G: 174, B: 96},
    {R: 47, G: 128, B: 237},
    {R: 86, G: 204, B: 242},
    {R: 155, G: 81, B: 224},
    {R: 209, G: 119, B: 242},
    {R: 189, G: 189, B: 189},
    {R: 153, G: 57, B: 57},
    {R: 255, G: 138, B: 130},
    {R: 180, G: 191, B: 89},
    {R: 27, G: 122, B: 67},
    {R: 84, G: 156, B: 138},
    {R: 36, G: 169, B: 179},
    {R: 107, G: 170, B: 191},
    {R: 120, G: 62, B: 173},
    {R: 217, G: 106, B: 180},
    {R: 138, G: 138, B: 138},
];

const MALE_AVATAR_COUNT = 17;
const FEMALE_AVATAR_COUNT = 19;

const ch = new colorHash();

const COLOR_OVER_DARK = tinycolor("rgba(255,255,255,.7");
const COLOR_OVER_LIGHT = tinycolor("rgba(0,0,0,.6");

const Letters = ({ firstName, lastName, size, color }:LetterProps) => {
    const firstInitial = firstName === "" ? null : firstName.substring(0,1).toUpperCase();
    const lastInitial = lastName === "" ? null : lastName.substring(0,1).toUpperCase();

    const letterStyle: React.CSSProperties = {
        fontSize: `${(firstInitial && lastInitial) ? size * .42 : size * .6}px`,
        color: `${tinycolor(`rgba(${color.R}, ${color.G}, ${color.B}, 1)`).isLight() ? COLOR_OVER_DARK : COLOR_OVER_LIGHT}`,
        lineHeight: 0
    };

    return (
        <>
            {firstInitial &&
                <span style={letterStyle}>{firstInitial}</span>
            }
            {lastInitial &&
                <span style={letterStyle}>{lastInitial}</span>
            }
        </>
    )
}

function getAvatarUrl(gender: string) {
    const genders = ['male', 'female'];
    let id = 0;

    if (gender === 'any') {
        gender = genders[Math.floor(Math.random()*genders.length)];
    }

    if (gender === 'male') {
        id = Math.floor(Math.random()*MALE_AVATAR_COUNT) + 1;
    } else {
        id = Math.floor(Math.random()*FEMALE_AVATAR_COUNT) + 1;
    }

    return `http://petelada.com/images/avs/${gender}/${id}.jpg`;
}

function getRandomFirstName(gender: string) {
    switch (gender) {
        case 'male':
            return maleFirstName[Math.floor(Math.random()*maleFirstName.length)];
            break;
        case 'female':
            return femaleFirstName[Math.floor(Math.random()*femaleFirstName.length)];
            break;
        default:
            const anyname = maleFirstName.concat(femaleFirstName);
            return anyname[Math.floor(Math.random()*anyname.length)];
    }
}

function getRandomLastName() {
    return lastName[Math.floor(Math.random()*lastName.length)];
}

interface State {
    firstName: string;
    lastName: string;
    background: string;
}

export class Avatar extends React.Component<Props, Partial<State>> {

    // Set default properties
    static defaultProps = {
        firstName: "",
        lastName: "",
        gender: 'any',
        showPhoto: false,
        borderRadius: 100
    }

    // Items shown in property panel
    static propertyControls: PropertyControls = {
        firstName: { type: ControlType.String, title: "First Name", placeholder: "John"},
        lastName: { type: ControlType.String, title: "Last Name", placeholder: "Smith" },
        showPhoto: { type: ControlType.Boolean, title: "Photo?" },
        gender: { 
            type: ControlType.SegmentedEnum, 
            title: "Gender",
            options: ["any", "female", "male"],
            optionTitles: ["Any", "F", "M"],
        },
        borderRadius: {
            type: ControlType.Number,
            max: 100,
            min: 0,
            step: 1,
            unit: 'px'
        }
    }

    constructor(props) {
        super(props);
        this.state = {
            background: null,
            firstName: getRandomFirstName(this.props.gender),
            lastName: getRandomLastName()
        };

    }

    getFirstName() {
        if (this.props.firstName !== '') {
            return this.props.firstName;
        }

        return this.state.firstName;
    }

    getLastName() {
        if (this.props.lastName !== '') {
            return this.props.lastName;
        } 
        
        return this.state.lastName;
    }

    componentDidMount() {
        if (this.state.background !== null) { return };

        this.setState({
            background: getAvatarUrl(this.props.gender)
        } as State);
    }

    componentDidUpdate(oldProps) {
        if (oldProps.gender !== this.props.gender) {
            this.setState({
                background: getAvatarUrl(this.props.gender),
                firstName: getRandomFirstName(this.props.gender),
                lastName: getRandomLastName()
            } as State);
        }
    }

    render() {
        const rgb = ch.rgb(this.getFirstName() + ' ' + this.getLastName());
        const color = diff.closest({ R: rgb[0], G: rgb[1], B: rgb[2] }, palette);

        const style: React.CSSProperties = {
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            textAlign: "center",
            overflow: "hidden",
            borderRadius: this.props.borderRadius >= 100 ? '50%' : this.props.borderRadius,
            width: this.props.width,
            height: this.props.width,
            backgroundColor: this.props.showPhoto ? `rgba(0, 0, 0, .1)` : `rgba(${color.R}, ${color.B}, ${color.G}, 1)`,
            backgroundImage: this.props.showPhoto ? `url(${this.state.background})` : '',
            backgroundRepeat: 'no-repeat',
            backgroundSize: 'cover',
            position: "relative"
        };

        const borderStyle: React.CSSProperties = {
            position: "absolute",
            left: 0, 
            top: 0,
            right: 0,
            bottom: 0,
            borderRadius: this.props.borderRadius >= 100 ? '50%' : this.props.borderRadius,
            border: "1px solid rgba(0,0,0,.1)"
        }
        
        return (
            <div style={style}>
                {this.props.showPhoto === false &&
                    <Letters firstName={this.getFirstName()} lastName={this.getLastName()} size={this.props.width} color={color} />
                }

                <div style={borderStyle} />
            </div>
        );
    }
}
